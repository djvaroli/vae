import numpy as np
from neptune.new.run import Run
from neptune.new.types import File
from tensorflow.python.keras.callbacks import Callback

from ..viz.image import image_grid


class LogNeptuneCallback(Callback):
    def __init__(self, run: Run, artifact_name: str, reference_array: np.ndarray):
        self.run = run
        self.artifact_name = artifact_name
        self.reference_array = reference_array

    def on_epoch_end(self, epoch, logs=None):
        array_to_log = self._generate_obj_to_log()
        self.run[self.artifact_name].log(File.as_image(array_to_log))


class LogReconstructionCallback(LogNeptuneCallback):
    """Logs the reconstruction of an image and the original source image."""

    def _generate_obj_to_log(self):
        encoded = self.model.encode(self.reference_array)
        if isinstance(encoded, tuple):
            encoded = encoded[0]

        reconstructions = self.model.decode(encoded)
        obj_to_log = image_grid(
            np.concatenate([self.reference_array, reconstructions]),
            n_rows=4,
            clip_range=(0.0, 1.0),
        )
        return obj_to_log


class LogGenReferenceCallback(LogNeptuneCallback):
    """Logs images generated by model from a reference sample"""

    def _generate_obj_to_log(self):
        generated_images = self.model.decode(self.reference_array)
        obj_to_log = image_grid(generated_images, n_rows=4, clip_range=(0.0, 1.0))
        return obj_to_log
